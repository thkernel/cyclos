### JDBC connection DataSource provider
## C3P0. Any properties under cyclos.datasource.* (except cyclos.datasource.provider)
## is passed as a property to C3P0. For more details, see http://www.mchange.com/projects/c3p0
cyclos.datasource.provider = c3p0
cyclos.datasource.driverClass = org.postgresql.Driver
cyclos.datasource.jdbcUrl = jdbc:postgresql://localhost/cyclos4
cyclos.datasource.user = cyclos
cyclos.datasource.password = cyclos
cyclos.datasource.minPoolSize = 1
cyclos.datasource.maxPoolSize = 20
cyclos.datasource.acquireIncrement = 1
cyclos.datasource.idleConnectionTestPeriod = 60
cyclos.datasource.maxIdleTime = 3600
cyclos.datasource.testConnectionOnCheckout = false
cyclos.datasource.preferredTestQuery = select 1
cyclos.datasource.acquireRetryAttempts = 30
cyclos.datasource.acquireRetryDelay = 1000
cyclos.datasource.numHelperThreads = 5
cyclos.datasource.checkoutTimeout = 300000
cyclos.datasource.maxStatementsPerConnection = 100

## JNDI data source - looks up a connection under the application server JNDI
## Any properties under cyclos.datasource.* (except cyclos.datasource.provider and cyclos.datasource.jdbcExtractor) are passed to the InitialContext
# cyclos.datasource.provider = jndi
# cyclos.datasource.jndiName = java:comp/env/jdbc/DataSource
## Specify the fully-qualified name of a Java class implementing org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractor
# cyclos.datasource.jdbcExtractor = <classname>

## Custom data source provider
## Specify the fully-qualified name of a Java class implementing org.cyclos.bootstrap.DataSourceProvider
# cyclos.datasource.provider = <classname> 

### JPA provider (EclipseLink) properties
# We require a custom platform definition, or BLOBs won't work with EclipseLink's default settings
eclipselink.target-database = org.cyclos.bootstrap.CyclosPostgreSQLPlatform
# Integrate EclipseLink logging in our logging structure
eclipselink.logging.logger = org.cyclos.bootstrap.EclipseLinkSLF4JLogger
## Log SQL queries and bind parameters
# eclipselink.logging.level.sql = FINE
# eclipselink.logging.parameters = true

### Database management (automatic creation and upgrade)
# Set cyclos.db.managed to true (the default) for automatic schema creation, database 
# population and upgrades. False will only validate the database version at startup
cyclos.db.managed = true

### Cluster / instance configuration
# Determines the cluster implementation to use. Can be one of the following: 
# * none: No cluster, just a local installation (default)
# * hazelcast: Uses Hazelcast for cluster-related operations
# * <fully-qualified name of a Java class> A custom class implementing org.cyclos.impl.utils.cluster.ClusterHandler
cyclos.clusterHandler = none

### Content manager configuration
### Any properties under cyclos.storedFileContentManager.* (except cyclos.storedFileContentManager) are passed to the implementation

# Comma separated list of directory names where individual documents and image/file custom field values can be stored
# This property is supported by the following built-in implementations: 'file' and 's3'.
# For 's3' it contains a list of bucket names and for 'file' a list of folder names to be created as a child of the rootDir.  
# cyclos.storedFileContentManager.directories=

## Database content manager configuration (default)
cyclos.storedFileContentManager = db

## File system content manager configuration
# cyclos.storedFileContentManager = file
# This is the default parent folder used for all cases not supporting a directory (e.g custom/profile/configuration images, 
# shared documents, etc), the property 'cyclos.storedFileContentManager.directories' is not set or 
# no directory is selected for those cases supporting it.  
# cyclos.storedFileContentManager.rootDir =
# cyclos.storedFileContentManager.maxSubDirs = 100

## Amazon Simple Storage Service (Amazon S3) content manager configuration.
# cyclos.storedFileContentManager = s3
# This is the default bucket used for all cases not supporting a directory (e.g custom/profile/configuration images, 
# shared documents, etc), the property 'cyclos.storedFileContentManager.directories' is not set or 
# no directory is selected for those cases supporting it.  
# cyclos.storedFileContentManager.bucketName = 
# This is the default region used for the default bucket and for all buckets not defining a region.
# To define a region for a specific bucket please add a property of the form: cyclos.storedFileContentManager.regionName.bucket_name=region_name   
# cyclos.storedFileContentManager.regionName =
# cyclos.storedFileContentManager.accessKeyId = 
# cyclos.storedFileContentManager.secretAccessKey = 

## Custom content manager configuration
## Specify the fully-qualified name of a Java class implementing org.cyclos.impl.storage.StoredFileContentManager
# cyclos.storedFileContentManager = <classname> 

### Temporary path
# Cyclos needs to store temporary files at runtime. This setting specified the location.
# The following variables can be used (and are replaced by the correct value in runtime):
# * %w: The root path of the web application
# * %t: The Java default temporary directory
cyclos.tempDir = %w/WEB-INF/temp

### Load balancers / Proxies
## In some deploys, intermediate proxy hosts act as load balancers, generating a new HTTP request to Cyclos.
## The new requests normally carry on additional information from the original request.
## The following settings contain the names of headers that contain such information. 
## When left empty (default) it is assumed that the request came directly from the end user.
# Header containing the IP address of the original request. The de-facto standard value is X-Forwarded-For
cyclos.header.remoteAddress =
# Protocol of the original request. The de-facto standard value is X-Forwarded-Proto
cyclos.header.protocol =

### Rate limit
## Cyclos has a web service API (the same used by the main web application) that allow some
## calls as guests. Is is, thus, an important measure to improve robustness against DoS attacks
## is to apply rate limits. Rate limits are expressed in requests per second, and 2 limits can
## be used: global (for any client) and per IP address. It is also possible to set one or more
## IP addresses that are white listed, that is, never have rate limits applied.
## When using a clustered environment, this applies only to the current node, not for the entire cluster.
# The maximum number of requests per second for all IP addresses. When left blank or zero, is not applied.
cyclos.rateLimit.global = 100
# The maximum number of requests per second per IP address. When left blank or zero, is not applied.
cyclos.rateLimit.ip = 10
# The space (or comma) separated list of IP addresses which are never limited
cyclos.rateLimit.whitelist =

### Session management
# Indicates whether sessions are valid from any IP address (true) or only the original IP address
# that created it (false). Restricting sessions (false) helps improving security, because if a session
# token is somehow stolen, anyone in the world can use this session token and impersonate the user.
# This is the default behavior.
# However, sometimes organizations have a pool of outbound Internet connections, and the IP address
# varies. Or in mobile networks, the user may switch between Wi-Fi, 3g, etc, all with different addresses.
# In such case, it is mandatory to allow the same session to be used, or the user will experience several
# disconnects. As this scenario is more and more common, and any client might have such multiple connections
# setup, sessions are allowed from any IP address by default.
cyclos.sessions.anyAddress = true

### Identifier masks
# Most of the time, it's a good practice to mask identifiers sent to clients, so it's harder to guess valid ones
# Can be one of the following:
# * cipher: Applies a cipher algorithm to identifiers. This is the default
# * none: Doesn't change identifiers. Useful when debugging
# <fully-qualified name of a Java class> A custom class name which implements org.cyclos.impl.utils.IdMask
cyclos.idMask = cipher

### NFF Token Principal types (User identification methods) 
# The NFC types require an encryption key to allow the management of the corresponding NFC tokens.
# The following values (case-insensitive) are valid for the key generation:
# * random: Uses a cryptographically strong random number generator (RNG) to generate the key.
# * zero: Uses a fixed default key of 16 bytes long with all bytes in zero. This is the default.
# * <key>: Fixed custom key of 16 bytes long expressed in Hexadecimal notation, i.e. 32 Hexadecimal characters).
cyclos.nfcTokenTypeKey = zero

### Maximum BCrypt strength
# This is the maximum strength allowed on password types whose input method is text box.
# The larger is this number, the safer are the stored passwords against brute force.
# Every increment on this number makes it take twice the time to encode a password.
# Here are some examples of time taken by a 3rd gen Core i5 system to encode passwords:
# * strength = 4, time = 2ms
# * strength = 6, time = 5ms 
# * strength = 10, time = 80ms 
# * strength = 12, time = 320ms 
# * strength = 14, time = 1290ms
# * strength = 16, time = 5170ms ... 
# Ultimately, the strength is set in the password type, but this setting prevents unmanaged networks from error or abuse.
# The allowed BCrypt strength ranges from 4 to 31.
cyclos.maxBCryptStrength = 12

### Maximum background tasks
# Sets the maximum number of background tasks to be executed at any given time.
# Setting to zero effectively disables background tasks.
# The default value is 4.
cyclos.maxBackgroundTasks = 4

### Dump all errors on console
# When set to true, all errors will be dumped to the application server console, easing debugging
# Defaults to false
cyclos.dumpAllErrors = false

### Enable CORS HTTP headers
# If the server is used by Ajax requests from other domains, CORS needs to be enabled.
# To enable CORS from any host, use *. To enable from a particular address, use a comma-separated list of URLs
#cyclos.cors.origin = *

### Rest API reference page
# Enables or disables the API reference page at <root>/api.
# The API methods themselves in /api/* are always enabled, and access can be controlled in Cyclos channels
cyclos.rest.reference = true

### Cleanup
# Number of days messages on trash should be kept before being permanently removed.
# Zero means never remove. Defaults to 30. 
cyclos.purgeMessagesOnTrash.days = 30

# Number of days notifications should be kept before being permanently removed.
# Zero means never remove. Defaults to 30. 
cyclos.purgeNotifications.days = 30

# Number of days user registrations pending e-mail confirmation should be kept before being permanently removed.
# Zero means never remove. Defaults to 7. 
cyclos.purgeUnconfirmedUsers.days = 7

# Number of days the system will wait for a pending external user payment before expiring it and returning the reserved amount to the payer.
# Zero means never expire. Defaults to 30.
cyclos.expireExternalPayments.days = 30

# Number of days the system will wait for imports to be either archived (if processed) or removed).
# Zero means never archive. Defaults to 30.
cyclos.archiveImports.days = 30

### Caches
# Caches can be used to prevent excessive round-trips to the database, improving performance at cost of extra memory.
# There are several caches used by Cyclos, whose names are:
#  configurationAccessor, configurationImages, channels, configurationChannel, productsAccessor, groups, 
#  requestData, license, extensionPoints, customizedTranslations, dataTranslations, transferTypes, customWebServices, 
#  table.<table-name>
# Cyclos uses Guava caches, and support some of its configuration properties:
# * maximumSize: Defines the maximum number of cached elements. Setting to zero will effectively disable cache
# * expireAfterWrite: Defines a timeout (like 60s, 10m or 1h) for the elements to expire after being written to cache
# * expireAfterAccess: Defines a timeout (like 60s, 10m or 1h) for the elements to expire after being last accessed
# * concurrencyLevel: Defines the number of threads which can modify the cache concurrently. The default is 4.
# Basically, cyclos.cache.default.<property> will apply that configuration property to all caches by default, while
# cyclos.cache.<name>.<property> will apply that configuration property to the specific cache.
cyclos.cache.default.maximumSize = 5000
cyclos.cache.default.expireAfterAccess = 6h

# The query cache may be disabled altogether. If used, the configuration will be read from cyclos.cache.table.<table-name>.
# Not all tables are cached, only those which doesn't change frequently, because on every insert / update / delete,
# the entire table cache is cleared. As usual, a benchmark can be conducted to find the best balance, but in most cases,
# it is advised to enable the query cache.
cyclos.cache.queries = true

### Logging
# Cyclos can generate logs either on rotating files, to an external database or to the console (standard output).
# See the cyclos.log property below for more information on the available configuration options for each case. 

## General log settings
# Number of threads which will process logs in background. When set to zero, logs are processed within requests,
# delaying responses but resulting in greater confidence that logs are actually persisted.
cyclos.log.threads = 2

## Log to files (default)
cyclos.log = file
# Directory where to write log files. Supports the following variables:
# * %w: The root path of the web application
# * %t: The Java default temporary directory
# * %n: The network internal name
cyclos.log.dir = %t/cyclos4/logs
# The maximum number of rotating log files per network
cyclos.log.maxFiles = 5
# The maximum size per log file. Can end with K for kilobytes or M for megabytes
cyclos.log.maxFileSize = 1M

## Log to an external database. The cyclos.log.datasource prefix configures the datasource,
## and the available settings are analogous to the settings with the 'cyclos.datasource' prefix.
#cyclos.log = db
#cyclos.log.datasource.provider = c3p0
#cyclos.log.datasource.driverClass = org.postgresql.Driver
#cyclos.log.datasource.jdbcUrl = jdbc:postgresql://localhost/cyclos4_logs
#cyclos.log.datasource.user = cyclos
#cyclos.log.datasource.password = cyclos
#cyclos.log.datasource.minPoolSize = 1
## The maximum pool size should be the same size as 'cyclos.log.threads' when logging on the background. 
#cyclos.log.datasource.maxPoolSize = 2
#cyclos.log.datasource.acquireIncrement = 1
#cyclos.log.datasource.idleConnectionTestPeriod = 60
#cyclos.log.datasource.maxIdleTime = 3600
#cyclos.log.datasource.testConnectionOnCheckout = false
#cyclos.log.datasource.preferredTestQuery = select 1
#cyclos.log.datasource.acquireRetryAttempts = 5
#cyclos.log.datasource.acquireRetryDelay = 10
#cyclos.log.datasource.numHelperThreads = 2
#cyclos.log.datasource.checkoutTimeout = 5000

## Log to console
# cyclos.log = console

## Disable logging
# cyclos.log = none

## Custom log manager
## Specify the fully-qualified name of a Java class implementing org.cyclos.impl.logging.LogProvider
# cyclos.log = <classname>
 
### E-mails
# Minimum time to wait between sent e-mails. Sometimes large bursts of e-mails are sent. This setting avoids
# problems with providers that limit the amount of e-mails sent per a given amount of time. 
cyclos.mail.sleepSeconds = 1

### Custom response headers
# It is possible to return custom headers with every response returned by Cyclos.
# All settings like cyclos.responseHeader.<name> = <value> are sent as response headers. 
# By default, the following are used:
# cyclos.responseHeader.X-Frame-Options = SAMEORIGIN
# cyclos.responseHeader.X-XSS-Protection = 1; mode=block

### Web services
# Defines whether to apply GZIP compression to WEB-RPC responses.
# When enabling will consume less network band at cost of higher cpu / memory
# Defaults to false 
cyclos.ws.gzip = false

### Kaptcha (generator for image with letters in public registration)
### See http://code.google.com/p/kaptcha/wiki/ConfigParameters
### Cyclos modifies the default behavior by basing the background and 
### dimensions on the images/captcha_background.png file, and never draws
### an extra border, as the captcha image is already show inside one

### Text configuration
kaptcha.textproducer.char.length=6
kaptcha.textproducer.char.string=abcde2345678gfymnpwx
kaptcha.textproducer.font.names=Serif, SansSerif, Monospaced
kaptcha.textproducer.font.color=32,32,32

### The effect used to make text harder to OCR
### A fisheye distortion 
#kaptcha.obscurificator.impl=com.google.code.kaptcha.impl.FishEyeGimpy
### A shadow below the text
kaptcha.obscurificator.impl=com.google.code.kaptcha.impl.ShadowGimpy
### Some ripples in the text
#kaptcha.obscurificator.impl=com.google.code.kaptcha.impl.WaterRipple

### Noise generator
### Random lines
#kaptcha.noise.impl=com.google.code.kaptcha.impl.DefaultNoise 
### No noise
kaptcha.noise.impl=com.google.code.kaptcha.impl.NoNoise